import pandas as pdnumber1 = pd.read_csv('/Users/kierensinghgill/Desktop/Homework/2021 Spring/Intro to DataSci/Functions/F7/kSinput1.csv', header=None)number2 = pd.read_csv('/Users/kierensinghgill/Desktop/Homework/2021 Spring/Intro to DataSci/Functions/F7/kSinput2.csv', header=None)dataset_1 = number2.to_numpy()X1 = dataset_1[:,0]X2 = dataset_1[:,1]writtenBy = "KierenSinghGill"dateWritten = "May 11 2021"#FUNCTION DESCRIPTION    #This function will perform a Kolmogorov-Smirnov (KS) test#This function takes in 3 inputs    #X1: dataset 1    #X2: dataset 2    #flag: either 1 or 2#This function returns:    #If flag == 1: Returns the largest distance between the two cumulative sample distributions    #If flag == 2: Returns the total difference between the two sample distributions#ASSUMPTIONS:     #The two samples can be input as 1D numpy arrays, dataframes or even lists.      #By default, assume the inputs to be 1D numpy arrays of arbitrary – but equal – length. import numpy as npdef totalKS(X1, X2, flag):    add_1 = np.zeros(len(X1))    add_2 = np.ones(len(X2))        X1_traced = np.vstack((X1,add_1))    X2_traced = np.vstack((X2,add_2))        X = np.transpose(np.concatenate((X1_traced,X2_traced), axis = 1))    sorted_X = X[np.argsort(X[:, 0])]        percentile = 100/len(X1)        y1 = 0    y2 = 0    d_list = []    for i in sorted_X[:,1]:        if i == 0:            y1 += percentile        elif i == 1:            y2 += percentile            d = abs(y1-y2)        d_list.append(d)        d_array = np.array(d_list)            dMax = np.amax(d_array)    dAverage = (np.sum(d_array))/(len(d_array))        if flag == 1:        return dMax    elif flag == 2:        return dAverage    